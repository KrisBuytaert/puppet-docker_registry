# All other flavors inherit the `common' config snippet
common: &common
    issue: '"docker-registry server"'
    # Default log level is info
    loglevel: _env:LOGLEVEL:<%= scope['docker_registry::loglevel'] %>
    # Enable debugging (additional informations in the output of the _ping endpoint)
    debug: _env:DEBUG:<%= scope['docker_registry::debug'] %>
<% if scope['docker_registry::standalone']  -%>
    # By default, the registry acts standalone (eg: doesn't query the index)
    standalone: _env:STANDALONE:<%= scope['docker_registry::standalone'] %>
<% else -%>
    # The default endpoint to use (if NOT standalone) is index.docker.io
    index_endpoint: _env:INDEX_ENDPOINT:<%= scope['docker_registry::endpoint'] %>
<% end -%>
    # Storage redirect is disabled
    storage_redirect: _env:STORAGE_REDIRECT
    # Token auth is enabled (if NOT standalone)
    disable_token_auth: _env:DISABLE_TOKEN_AUTH
    # No priv key
    privileged_key: _env:PRIVILEGED_KEY
    # Search backend
    search_backend: _env:SEARCH_BACKEND:sqlalchemy
    # SQLite search backend
    sqlalchemy_index_database: _env:SQLALCHEMY_INDEX_DATABASE:<%= @sqlalchemy_index_database %>

<% if scope['docker_registry::mirror_source'] and scope['docker_registry::mirror_source'] != :undef and scope['docker_registry::mirror_source'] != '' then -%>
    # Mirroring is enabled
    mirroring:
        source: _env:MIRROR_SOURCE:<%= scope['docker_registry::mirror_source'] %>
        source_index: _env:MIRROR_SOURCE_INDEX:<%= scope['docker_registry::mirror_source_index'] %>
        tags_cache_ttl: _env:MIRROR_TAGS_CACHE_TTL:<%= scope['docker_registry::mirror_tags_cache_ttl'] %>

<% end -%>
<% if scope['docker_registry::redis_hostname'] != :undef and scope['docker_registry::redis_hostname'] != '' then -%>
    cache:
        host: _env:CACHE_REDIS_HOST:<%= scope['docker_registry::redis_hostname'] %>
        port: _env:CACHE_REDIS_PORT:<%= scope['docker_registry::redis_port'] %>
        db: _env:CACHE_REDIS_DB:<%= scope['docker_registry::redis_db'] %>
        password: _env:CACHE_REDIS_PASSWORD:<%= scope['docker_registry::redis_pass'] %>

<% end -%>
<% if scope['docker_registry::lru_redis_hostname'] != :undef and scope['docker_registry::lru_redis_hostname'] != '' then -%>
    # Enabling LRU cache for small files
    # This speeds up read/write on small files
    # when using a remote storage backend (like S3).
    cache_lru:
        host: _env:CACHE_LRU_REDIS_HOST:<%= scope['docker_registry::lru_redis_hostname'] %>
        port: _env:CACHE_LRU_REDIS_PORT:<%= scope['docker_registry::lru_redis_port'] %>
        db: _env:CACHE_LRU_REDIS_DB>:<%= scope['docker_registry::lru_redis_db'] %>
        password: _env:CACHE_LRU_REDIS_PASSWORD:<%= scope['docker_registry::lru_redis_pass'] %>

<% end -%>
<% if scope['docker_registry::smtp_hostname'] != :undef and scope['docker_registry::smtp_hostname'] != '' then -%>
    # Enabling these options makes the Registry send an email on each code Exception
    email_exceptions:
        smtp_host: _env:SMTP_HOST:<%= scope['docker_registry::smtp_hostname'] %>
        smtp_port: _env:SMTP_PORT:<%= scope['docker_registry::smtp_port'] %>
        smtp_login: _env:SMTP_LOGIN<% if scope['docker_registry::smtp_login'] != :undef -%>:<%= scope['docker_registry::smtp_login'] %><% end %>
        smtp_password: _env:SMTP_PASSWORD<% if scope['docker_registry::smtp_pass'] != :undef -%>:<%= scope['docker_registry::smtp_pass'] %><% end %>
        smtp_secure: _env:SMTP_SECURE:<%= scope['docker_registry::smtp_secure'] %>
        from_addr: _env:SMTP_FROM_ADDR:<%= scope['docker_registry::smtp_from_address'] %>
        to_addr: _env:SMTP_TO_ADDR:<%= scope['docker_registry::smtp_to_address'] %>

<% end -%>
    # Enable bugsnag (set the API key)
    bugsnag: _env:BUGSNAG

    # CORS support is not enabled by default
    cors:
        origins: _env:CORS_ORIGINS
        methods: _env:CORS_METHODS
        headers: _env:CORS_HEADERS:[Content-Type]
        expose_headers: _env:CORS_EXPOSE_HEADERS
        supports_credentials: _env:CORS_SUPPORTS_CREDENTIALS
        max_age: _env:CORS_MAX_AGE
        send_wildcard: _env:CORS_SEND_WILDCARD
        always_send: _env:CORS_ALWAYS_SEND
        automatic_options: _env:CORS_AUTOMATIC_OPTIONS
        vary_header: _env:CORS_VARY_HEADER
        resources: _env:CORS_RESOURCES
